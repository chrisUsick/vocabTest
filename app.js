// Generated by CoffeeScript 1.6.3
/*
Module dependencies
*/


(function() {
  var GoogleStrategy, IndexWs, MemStore, SelectCategory, TestWs, WebSocketServer, WsHandler, app, constring, express, fs, getSessionData, http, parseCookie, passport, path, pg, routes, runQuery, server, store, textQueries, wss;

  express = require("express");

  routes = require("./routes/routes.js");

  http = require("http");

  path = require("path");

  fs = require('fs');

  pg = require('pg');

  passport = require('passport');

  GoogleStrategy = require('passport-google').Strategy;

  WebSocketServer = require("ws").Server;

  parseCookie = express.cookieParser();

  MemStore = express.session.MemoryStore;

  store = new MemStore();

  SelectCategory = require("./lib/SelectCategory.js").SelectCategory;

  IndexWs = require("./lib/IndexWs.js").IndexWs;

  TestWs = require("./lib/TestWs.js").TestWs;

  WsHandler = require("./lib/WsHandler.js").WsHandler;

  runQuery = require("./lib/pg-helper.js").runQuery;

  app = express();

  app.set("port", process.env.PORT || 3000);

  app.set("views", path.join(__dirname, "views"));

  app.set("view engine", "jade");

  app.use(express.favicon());

  app.use(express.logger("dev"));

  app.use(express.json());

  app.use(express.urlencoded());

  app.use(express.methodOverride());

  app.use(express["static"](path.join(__dirname, "public")));

  app.use(express.cookieParser('guess again'));

  app.use(express.session({
    store: store,
    key: 'sid',
    secret: 'guess again'
  }));

  app.use(passport.initialize());

  app.use(app.router);

  app.use(passport.session());

  if ("development" === app.get("env")) {
    app.use(express.errorHandler());
  }

  console.log(new GoogleStrategy({
    returnURL: 'http://192.168.56.1:3000/auth/google/return',
    realm: 'http://192.168.56.1:3000/'
  }), 'goog strat');

  passport.use(new GoogleStrategy({
    returnURL: 'http://192.168.56.1:3000/auth/google/return',
    realm: 'http://192.168.56.1:3000/'
  }, function(identifier, profile, done) {
    console.log(profile, identifier, 'from GoogleStrategy');
    return done(null, {
      email: profile.emails[0].value,
      name: profile.displayName
    });
  }));

  passport.serializeUser = function(user, done) {
    return done(null, user);
  };

  passport.deserializeUser = function(user, done) {
    return done(null, user);
  };

  app.get("/", routes.index);

  app.get("/test", routes.test);

  app.get("/login", routes.login);

  app.get("/auth/google", passport.authenticate('google'));

  app.get("/auth/google/return", passport.authenticate('google', {
    successRedirect: '/',
    failureRedirect: '/login'
  }));

  server = http.createServer(app).listen(app.get("port"), '192.168.56.1', function() {
    return console.log("Express server listening on port " + app.get("port"));
  });

  constring = "postgres://postgres@localhost:5432/postgres";

  textQueries = fs.readFileSync('queries.sql', 'utf8');

  runQuery(new pg.Client(constring), textQueries, null, function(r) {
    return console.log('prepared queries loaded');
  });

  wss = new WebSocketServer({
    server: server
  });

  wss.on("connection", function(ws) {
    var wsHandler;
    wsHandler = new WsHandler();
    wsHandler.addConversations([new SelectCategory(ws, pg.Client, constring), new IndexWs(ws, pg.Client, constring), new TestWs(ws, pg.Client, constring)]);
    return ws.on('message', function(data, flags) {
      var msg;
      msg = JSON.parse(data);
      return getSessionData(ws, function(ses) {
        if (msg.data) {
          msg.data.ses = ses;
        } else {
          msg.data = {
            ses: ses
          };
        }
        return wsHandler.onmessage(msg);
      });
    });
  });

  getSessionData = function(ws, cb) {
    return parseCookie(ws.upgradeReq, null, function(err) {
      var sID;
      if (err) {
        console.log('error');
      }
      sID = ws.upgradeReq.cookies['sid'].substring(2, 26);
      return store.get(sID, function(err, ses) {
        return cb(ses);
      });
    });
  };

}).call(this);
